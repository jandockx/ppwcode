#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserManagement.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UserManagement")]
	public partial class UserManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConstraintMessage(ConstraintMessage instance);
    partial void UpdateConstraintMessage(ConstraintMessage instance);
    partial void DeleteConstraintMessage(ConstraintMessage instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertMenuPermission(MenuPermission instance);
    partial void UpdateMenuPermission(MenuPermission instance);
    partial void DeleteMenuPermission(MenuPermission instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPagePermission(PagePermission instance);
    partial void UpdatePagePermission(PagePermission instance);
    partial void DeletePagePermission(PagePermission instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolePermission(RolePermission instance);
    partial void UpdateRolePermission(RolePermission instance);
    partial void DeleteRolePermission(RolePermission instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public UserManagementDataContext() : 
				base(global::UserManagement.Data.Properties.Settings.Default.userManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ConstraintMessage> ConstraintMessages
		{
			get
			{
				return this.GetTable<ConstraintMessage>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<MenuPermission> MenuPermissions
		{
			get
			{
				return this.GetTable<MenuPermission>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<PagePermission> PagePermissions
		{
			get
			{
				return this.GetTable<PagePermission>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolePermission> RolePermissions
		{
			get
			{
				return this.GetTable<RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnCanSeeRole", IsComposable=true)]
		public System.Nullable<bool> fnCanSeeRole([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, roleID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnCanSeeUser", IsComposable=true)]
		public System.Nullable<bool> fnCanSeeUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ViewUserID", DbType="Int")] System.Nullable<int> viewUserID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, viewUserID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetMenuItems", IsComposable=true)]
		public IQueryable<fnGetMenuItemsResult> fnGetMenuItems([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageLCID", DbType="Int")] System.Nullable<int> languageLCID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DefaultLanguageLCID", DbType="Int")] System.Nullable<int> defaultLanguageLCID)
		{
			return this.CreateMethodCallQuery<fnGetMenuItemsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, languageLCID, defaultLanguageLCID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetPagePermissions", IsComposable=true)]
		public IQueryable<fnGetPagePermissionsResult> fnGetPagePermissions([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			return this.CreateMethodCallQuery<fnGetPagePermissionsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetPermissionsList", IsComposable=true)]
		public string fnGetPermissionsList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_ConstraintMessage_D")]
		public int P_ConstraintMessage_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConstraintName", DbType="NVarChar(128)")] string constraintName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, constraintName, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_UserRole_U")]
		public int P_UserRole_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserRoleID", DbType="Int")] System.Nullable<int> userRoleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userRoleID, userID, roleID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_ConstraintMessage_I")]
		public int P_ConstraintMessage_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConstraintName", DbType="NVarChar(128)")] string constraintName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConstraintType", DbType="VarChar(11)")] string constraintType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, constraintName, constraintType, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_ConstraintMessage_U")]
		public int P_ConstraintMessage_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConstraintName", DbType="NVarChar(128)")] string constraintName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ConstraintType", DbType="VarChar(11)")] string constraintType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, constraintName, constraintType, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_ErrorHandler")]
		public int P_ErrorHandler([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> xact_state, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> lcid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> default_lcid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> error_number, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> error_severity, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> error_state, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] string error_message, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> error_line, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] string error_procedure, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(128)")] ref string constraint_name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), xact_state, lcid, default_lcid, error_number, error_severity, error_state, error_message, error_line, error_procedure, errorinfo, constraint_name);
			errorinfo = ((string)(result.GetParameterValue(9)));
			constraint_name = ((string)(result.GetParameterValue(10)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Language_D")]
		public int P_Language_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageLCID", DbType="Int")] System.Nullable<int> languageLCID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, languageLCID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Language_I")]
		public int P_Language_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageLCID", DbType="Int")] System.Nullable<int> languageLCID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CultureName", DbType="NVarChar(20)")] string cultureName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(128)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, languageLCID, cultureName, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Language_U")]
		public int P_Language_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageLCID", DbType="Int")] System.Nullable<int> languageLCID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CultureName", DbType="NVarChar(20)")] string cultureName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(128)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, languageLCID, cultureName, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Menu_D")]
		public int P_Menu_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MenuID", DbType="Int")] System.Nullable<int> menuID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, menuID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Menu_I")]
		public int P_Menu_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MenuID", DbType="Int")] System.Nullable<int> menuID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentMenuID", DbType="Int")] System.Nullable<int> parentMenuID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sequence", DbType="Int")] System.Nullable<int> sequence, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="URL", DbType="NVarChar(512)")] string uRL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, menuID, parentMenuID, sequence, uRL, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Menu_U")]
		public int P_Menu_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MenuID", DbType="Int")] System.Nullable<int> menuID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ParentMenuID", DbType="Int")] System.Nullable<int> parentMenuID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Sequence", DbType="Int")] System.Nullable<int> sequence, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="URL", DbType="NVarChar(512)")] string uRL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, menuID, parentMenuID, sequence, uRL, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_MenuPermission_D")]
		public int P_MenuPermission_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MenuID", DbType="Int")] System.Nullable<int> menuID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, menuID, permissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_MenuPermission_I")]
		public int P_MenuPermission_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MenuID", DbType="Int")] System.Nullable<int> menuID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, menuID, permissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Page_D")]
		public int P_Page_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageID", DbType="Int")] System.Nullable<int> pageID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, pageID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Page_I")]
		public int P_Page_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageID", DbType="Int")] ref System.Nullable<int> pageID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, pageID, name, errorinfo);
			pageID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Page_U")]
		public int P_Page_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageID", DbType="Int")] System.Nullable<int> pageID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, pageID, name, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_PagePermission_D")]
		public int P_PagePermission_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageID", DbType="Int")] System.Nullable<int> pageID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, pageID, permissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_PagePermission_I")]
		public int P_PagePermission_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PageID", DbType="Int")] System.Nullable<int> pageID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, pageID, permissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Permission_D")]
		public int P_Permission_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, permissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Permission_I")]
		public int P_Permission_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RequiredPermissionID", DbType="Int")] System.Nullable<int> requiredPermissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Action", DbType="Char(1)")] System.Nullable<char> action, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(128)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, permissionID, requiredPermissionID, action, name, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Permission_U")]
		public int P_Permission_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RequiredPermissionID", DbType="Int")] System.Nullable<int> requiredPermissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Action", DbType="Char(1)")] System.Nullable<char> action, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(128)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, permissionID, requiredPermissionID, action, name, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(6)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Role_D")]
		public int P_Role_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, roleID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Role_D_Override")]
		public int P_Role_D_Override([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, roleID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Role_I")]
		public int P_Role_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] ref System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, roleID, description, errorinfo);
			roleID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_Role_U")]
		public int P_Role_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="Xml")] System.Xml.Linq.XDocument description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, roleID, description, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_RolePermission_D")]
		public int P_RolePermission_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RolePermissionID", DbType="Int")] System.Nullable<int> rolePermissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, rolePermissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_RolePermission_I")]
		public int P_RolePermission_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RolePermissionID", DbType="Int")] ref System.Nullable<int> rolePermissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, rolePermissionID, roleID, permissionID, errorinfo);
			rolePermissionID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_RolePermission_U")]
		public int P_RolePermission_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RolePermissionID", DbType="Int")] System.Nullable<int> rolePermissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PermissionID", DbType="Int")] System.Nullable<int> permissionID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, rolePermissionID, roleID, permissionID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_User_D")]
		public int P_User_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_User_D_Override")]
		public int P_User_D_Override([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_User_I")]
		public int P_User_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] ref System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="NVarChar(320)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(32)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="NVarChar(320)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageLCID", DbType="Int")] System.Nullable<int> languageLCID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(128)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NVarChar(64)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lockout", DbType="Bit")] System.Nullable<bool> lockout, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userID, userName, password, email, languageLCID, name, firstName, lockout, errorinfo);
			userID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			errorinfo = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_User_U")]
		public int P_User_U([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="NVarChar(320)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(32)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="NVarChar(320)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageLCID", DbType="Int")] System.Nullable<int> languageLCID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(128)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="NVarChar(64)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lockout", DbType="Bit")] System.Nullable<bool> lockout, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userID, userName, password, email, languageLCID, name, firstName, lockout, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_UserRole_D")]
		public int P_UserRole_D([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserRoleID", DbType="Int")] System.Nullable<int> userRoleID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userRoleID, errorinfo);
			errorinfo = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.P_UserRole_I")]
		public int P_UserRole_I([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Context", DbType="Xml")] System.Xml.Linq.XDocument context, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserRoleID", DbType="Int")] ref System.Nullable<int> userRoleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="Int")] System.Nullable<int> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] ref string errorinfo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), context, userRoleID, userID, roleID, errorinfo);
			userRoleID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			errorinfo = ((string)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConstraintMessage")]
	public partial class ConstraintMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConstraintName;
		
		private string _ConstraintType;
		
		private System.Xml.Linq.XDocument _Description;
		
		private System.Nullable<int> _UserCreate;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _UserModified;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConstraintNameChanging(string value);
    partial void OnConstraintNameChanged();
    partial void OnConstraintTypeChanging(string value);
    partial void OnConstraintTypeChanged();
    partial void OnDescriptionChanging(System.Xml.Linq.XDocument value);
    partial void OnDescriptionChanged();
    partial void OnUserCreateChanging(System.Nullable<int> value);
    partial void OnUserCreateChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnUserModifiedChanging(System.Nullable<int> value);
    partial void OnUserModifiedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public ConstraintMessage()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstraintName", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConstraintName
		{
			get
			{
				return this._ConstraintName;
			}
			set
			{
				if ((this._ConstraintName != value))
				{
					this.OnConstraintNameChanging(value);
					this.SendPropertyChanging();
					this._ConstraintName = value;
					this.SendPropertyChanged("ConstraintName");
					this.OnConstraintNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstraintType", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string ConstraintType
		{
			get
			{
				return this._ConstraintType;
			}
			set
			{
				if ((this._ConstraintType != value))
				{
					this.OnConstraintTypeChanging(value);
					this.SendPropertyChanging();
					this._ConstraintType = value;
					this.SendPropertyChanged("ConstraintType");
					this.OnConstraintTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XDocument Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="Int")]
		public System.Nullable<int> UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserModified", DbType="Int")]
		public System.Nullable<int> UserModified
		{
			get
			{
				return this._UserModified;
			}
			set
			{
				if ((this._UserModified != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserModifiedChanging(value);
					this.SendPropertyChanging();
					this._UserModified = value;
					this.SendPropertyChanged("UserModified");
					this.OnUserModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ConstraintMessage", Storage="_User", ThisKey="UserCreate", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ConstraintMessages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ConstraintMessages.Add(this);
						this._UserCreate = value.UserID;
					}
					else
					{
						this._UserCreate = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ConstraintMessage1", Storage="_User1", ThisKey="UserModified", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ConstraintMessages1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ConstraintMessages1.Add(this);
						this._UserModified = value.UserID;
					}
					else
					{
						this._UserModified = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleID;
		
		private int _UserID;
		
		private int _RoleID;
		
		private System.Nullable<int> _UserCreate;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _UserModified;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<User> _User2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserCreateChanging(System.Nullable<int> value);
    partial void OnUserCreateChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnUserModifiedChanging(System.Nullable<int> value);
    partial void OnUserModifiedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="Int")]
		public System.Nullable<int> UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserModified", DbType="Int")]
		public System.Nullable<int> UserModified
		{
			get
			{
				return this._UserModified;
			}
			set
			{
				if ((this._UserModified != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserModifiedChanging(value);
					this.SendPropertyChanging();
					this._UserModified = value;
					this.SendPropertyChanged("UserModified");
					this.OnUserModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole1", Storage="_User1", ThisKey="UserCreate", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserRoles1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserRoles1.Add(this);
						this._UserCreate = value.UserID;
					}
					else
					{
						this._UserCreate = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole2", Storage="_User2", ThisKey="UserModified", OtherKey="UserID", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.UserRoles2.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.UserRoles2.Add(this);
						this._UserModified = value.UserID;
					}
					else
					{
						this._UserModified = default(Nullable<int>);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageLCID;
		
		private string _CultureName;
		
		private string _Description;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageLCIDChanging(int value);
    partial void OnLanguageLCIDChanged();
    partial void OnCultureNameChanging(string value);
    partial void OnCultureNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Language()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageLCID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageLCID
		{
			get
			{
				return this._LanguageLCID;
			}
			set
			{
				if ((this._LanguageLCID != value))
				{
					this.OnLanguageLCIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageLCID = value;
					this.SendPropertyChanged("LanguageLCID");
					this.OnLanguageLCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CultureName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CultureName
		{
			get
			{
				return this._CultureName;
			}
			set
			{
				if ((this._CultureName != value))
				{
					this.OnCultureNameChanging(value);
					this.SendPropertyChanging();
					this._CultureName = value;
					this.SendPropertyChanged("CultureName");
					this.OnCultureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_User", Storage="_Users", ThisKey="LanguageLCID", OtherKey="LanguageLCID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuID;
		
		private System.Nullable<int> _ParentMenuID;
		
		private System.Nullable<int> _Sequence;
		
		private string _URL;
		
		private System.Xml.Linq.XDocument _Description;
		
		private EntitySet<MenuPermission> _MenuPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnParentMenuIDChanging(System.Nullable<int> value);
    partial void OnParentMenuIDChanged();
    partial void OnSequenceChanging(System.Nullable<int> value);
    partial void OnSequenceChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDescriptionChanging(System.Xml.Linq.XDocument value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Menu()
		{
			this._MenuPermissions = new EntitySet<MenuPermission>(new Action<MenuPermission>(this.attach_MenuPermissions), new Action<MenuPermission>(this.detach_MenuPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentMenuID", DbType="Int")]
		public System.Nullable<int> ParentMenuID
		{
			get
			{
				return this._ParentMenuID;
			}
			set
			{
				if ((this._ParentMenuID != value))
				{
					this.OnParentMenuIDChanging(value);
					this.SendPropertyChanging();
					this._ParentMenuID = value;
					this.SendPropertyChanged("ParentMenuID");
					this.OnParentMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int")]
		public System.Nullable<int> Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(512)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XDocument Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_MenuPermission", Storage="_MenuPermissions", ThisKey="MenuID", OtherKey="MenuID")]
		public EntitySet<MenuPermission> MenuPermissions
		{
			get
			{
				return this._MenuPermissions;
			}
			set
			{
				this._MenuPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuPermissions(MenuPermission entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_MenuPermissions(MenuPermission entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MenuPermission")]
	public partial class MenuPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuID;
		
		private int _PermissionID;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIDChanging(int value);
    partial void OnMenuIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public MenuPermission()
		{
			this._Menu = default(EntityRef<Menu>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_MenuPermission", Storage="_Menu", ThisKey="MenuID", OtherKey="MenuID", IsForeignKey=true)]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.MenuPermissions.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.MenuPermissions.Add(this);
						this._MenuID = value.MenuID;
					}
					else
					{
						this._MenuID = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_MenuPermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.MenuPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.MenuPermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageID;
		
		private string _Name;
		
		private EntitySet<PagePermission> _PagePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Page()
		{
			this._PagePermissions = new EntitySet<PagePermission>(new Action<PagePermission>(this.attach_PagePermissions), new Action<PagePermission>(this.detach_PagePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PagePermission", Storage="_PagePermissions", ThisKey="PageID", OtherKey="PageID")]
		public EntitySet<PagePermission> PagePermissions
		{
			get
			{
				return this._PagePermissions;
			}
			set
			{
				this._PagePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PagePermissions(PagePermission entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_PagePermissions(PagePermission entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PagePermission")]
	public partial class PagePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageID;
		
		private int _PermissionID;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIDChanging(int value);
    partial void OnPageIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public PagePermission()
		{
			this._Page = default(EntityRef<Page>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PageID
		{
			get
			{
				return this._PageID;
			}
			set
			{
				if ((this._PageID != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIDChanging(value);
					this.SendPropertyChanging();
					this._PageID = value;
					this.SendPropertyChanged("PageID");
					this.OnPageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_PagePermission", Storage="_Page", ThisKey="PageID", OtherKey="PageID", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PagePermissions.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PagePermissions.Add(this);
						this._PageID = value.PageID;
					}
					else
					{
						this._PageID = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PagePermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.PagePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.PagePermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private System.Nullable<int> _RequiredPermissionID;
		
		private char _Action;
		
		private string _Name;
		
		private System.Xml.Linq.XDocument _Description;
		
		private System.Nullable<int> _UserCreate;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _UserModified;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<MenuPermission> _MenuPermissions;
		
		private EntitySet<PagePermission> _PagePermissions;
		
		private EntitySet<Permission> _Permissions;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntityRef<Permission> _Permission1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnRequiredPermissionIDChanging(System.Nullable<int> value);
    partial void OnRequiredPermissionIDChanged();
    partial void OnActionChanging(char value);
    partial void OnActionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(System.Xml.Linq.XDocument value);
    partial void OnDescriptionChanged();
    partial void OnUserCreateChanging(System.Nullable<int> value);
    partial void OnUserCreateChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnUserModifiedChanging(System.Nullable<int> value);
    partial void OnUserModifiedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Permission()
		{
			this._MenuPermissions = new EntitySet<MenuPermission>(new Action<MenuPermission>(this.attach_MenuPermissions), new Action<MenuPermission>(this.detach_MenuPermissions));
			this._PagePermissions = new EntitySet<PagePermission>(new Action<PagePermission>(this.attach_PagePermissions), new Action<PagePermission>(this.detach_PagePermissions));
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._Permission1 = default(EntityRef<Permission>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredPermissionID", DbType="Int")]
		public System.Nullable<int> RequiredPermissionID
		{
			get
			{
				return this._RequiredPermissionID;
			}
			set
			{
				if ((this._RequiredPermissionID != value))
				{
					if (this._Permission1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequiredPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredPermissionID = value;
					this.SendPropertyChanged("RequiredPermissionID");
					this.OnRequiredPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Char(1) NOT NULL")]
		public char Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XDocument Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="Int")]
		public System.Nullable<int> UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserModified", DbType="Int")]
		public System.Nullable<int> UserModified
		{
			get
			{
				return this._UserModified;
			}
			set
			{
				if ((this._UserModified != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserModifiedChanging(value);
					this.SendPropertyChanging();
					this._UserModified = value;
					this.SendPropertyChanged("UserModified");
					this.OnUserModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_MenuPermission", Storage="_MenuPermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<MenuPermission> MenuPermissions
		{
			get
			{
				return this._MenuPermissions;
			}
			set
			{
				this._MenuPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PagePermission", Storage="_PagePermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<PagePermission> PagePermissions
		{
			get
			{
				return this._PagePermissions;
			}
			set
			{
				this._PagePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Permission", Storage="_Permissions", ThisKey="PermissionID", OtherKey="RequiredPermissionID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_RolePermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Permission", Storage="_Permission1", ThisKey="RequiredPermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission1
		{
			get
			{
				return this._Permission1.Entity;
			}
			set
			{
				Permission previousValue = this._Permission1.Entity;
				if (((previousValue != value) 
							|| (this._Permission1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission1.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Permission1.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._RequiredPermissionID = value.PermissionID;
					}
					else
					{
						this._RequiredPermissionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Permission", Storage="_User", ThisKey="UserCreate", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._UserCreate = value.UserID;
					}
					else
					{
						this._UserCreate = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Permission1", Storage="_User1", ThisKey="UserModified", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Permissions1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Permissions1.Add(this);
						this._UserModified = value.UserID;
					}
					else
					{
						this._UserModified = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MenuPermissions(MenuPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_MenuPermissions(MenuPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_PagePermissions(PagePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_PagePermissions(PagePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Permission1 = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Permission1 = null;
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private System.Xml.Linq.XDocument _Description;
		
		private System.Nullable<int> _UserCreate;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _UserModified;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnDescriptionChanging(System.Xml.Linq.XDocument value);
    partial void OnDescriptionChanged();
    partial void OnUserCreateChanging(System.Nullable<int> value);
    partial void OnUserCreateChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnUserModifiedChanging(System.Nullable<int> value);
    partial void OnUserModifiedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XDocument Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="Int")]
		public System.Nullable<int> UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserModified", DbType="Int")]
		public System.Nullable<int> UserModified
		{
			get
			{
				return this._UserModified;
			}
			set
			{
				if ((this._UserModified != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserModifiedChanging(value);
					this.SendPropertyChanging();
					this._UserModified = value;
					this.SendPropertyChanged("UserModified");
					this.OnUserModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermissions", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Role", Storage="_User", ThisKey="UserCreate", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._UserCreate = value.UserID;
					}
					else
					{
						this._UserCreate = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Role1", Storage="_User1", ThisKey="UserModified", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Roles1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Roles1.Add(this);
						this._UserModified = value.UserID;
					}
					else
					{
						this._UserModified = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermission")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RolePermissionID;
		
		private int _RoleID;
		
		private int _PermissionID;
		
		private System.Nullable<int> _UserCreate;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _UserModified;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolePermissionIDChanging(int value);
    partial void OnRolePermissionIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnUserCreateChanging(System.Nullable<int> value);
    partial void OnUserCreateChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnUserModifiedChanging(System.Nullable<int> value);
    partial void OnUserModifiedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public RolePermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolePermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RolePermissionID
		{
			get
			{
				return this._RolePermissionID;
			}
			set
			{
				if ((this._RolePermissionID != value))
				{
					this.OnRolePermissionIDChanging(value);
					this.SendPropertyChanging();
					this._RolePermissionID = value;
					this.SendPropertyChanged("RolePermissionID");
					this.OnRolePermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="Int")]
		public System.Nullable<int> UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserModified", DbType="Int")]
		public System.Nullable<int> UserModified
		{
			get
			{
				return this._UserModified;
			}
			set
			{
				if ((this._UserModified != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserModifiedChanging(value);
					this.SendPropertyChanging();
					this._UserModified = value;
					this.SendPropertyChanged("UserModified");
					this.OnUserModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RolePermission", Storage="_User", ThisKey="UserCreate", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._UserCreate = value.UserID;
					}
					else
					{
						this._UserCreate = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RolePermission1", Storage="_User1", ThisKey="UserModified", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.RolePermissions1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.RolePermissions1.Add(this);
						this._UserModified = value.UserID;
					}
					else
					{
						this._UserModified = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Email;
		
		private int _LanguageLCID;
		
		private string _Name;
		
		private string _FirstName;
		
		private bool _Lockout;
		
		private System.Nullable<int> _UserCreate;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _UserModified;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<ConstraintMessage> _ConstraintMessages;
		
		private EntitySet<ConstraintMessage> _ConstraintMessages1;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<UserRole> _UserRoles1;
		
		private EntitySet<UserRole> _UserRoles2;
		
		private EntitySet<Permission> _Permissions;
		
		private EntitySet<Permission> _Permissions1;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<Role> _Roles1;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntitySet<RolePermission> _RolePermissions1;
		
		private EntitySet<User> _Users;
		
		private EntitySet<User> _Users1;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<User> _User1;
		
		private EntityRef<User> _User2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLanguageLCIDChanging(int value);
    partial void OnLanguageLCIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLockoutChanging(bool value);
    partial void OnLockoutChanged();
    partial void OnUserCreateChanging(System.Nullable<int> value);
    partial void OnUserCreateChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnUserModifiedChanging(System.Nullable<int> value);
    partial void OnUserModifiedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public User()
		{
			this._ConstraintMessages = new EntitySet<ConstraintMessage>(new Action<ConstraintMessage>(this.attach_ConstraintMessages), new Action<ConstraintMessage>(this.detach_ConstraintMessages));
			this._ConstraintMessages1 = new EntitySet<ConstraintMessage>(new Action<ConstraintMessage>(this.attach_ConstraintMessages1), new Action<ConstraintMessage>(this.detach_ConstraintMessages1));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._UserRoles1 = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles1), new Action<UserRole>(this.detach_UserRoles1));
			this._UserRoles2 = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles2), new Action<UserRole>(this.detach_UserRoles2));
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._Permissions1 = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions1), new Action<Permission>(this.detach_Permissions1));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._Roles1 = new EntitySet<Role>(new Action<Role>(this.attach_Roles1), new Action<Role>(this.detach_Roles1));
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._RolePermissions1 = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions1), new Action<RolePermission>(this.detach_RolePermissions1));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Users1 = new EntitySet<User>(new Action<User>(this.attach_Users1), new Action<User>(this.detach_Users1));
			this._Language = default(EntityRef<Language>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageLCID", DbType="Int NOT NULL")]
		public int LanguageLCID
		{
			get
			{
				return this._LanguageLCID;
			}
			set
			{
				if ((this._LanguageLCID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageLCIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageLCID = value;
					this.SendPropertyChanged("LanguageLCID");
					this.OnLanguageLCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(64)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lockout", DbType="Bit NOT NULL")]
		public bool Lockout
		{
			get
			{
				return this._Lockout;
			}
			set
			{
				if ((this._Lockout != value))
				{
					this.OnLockoutChanging(value);
					this.SendPropertyChanging();
					this._Lockout = value;
					this.SendPropertyChanged("Lockout");
					this.OnLockoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCreate", DbType="Int")]
		public System.Nullable<int> UserCreate
		{
			get
			{
				return this._UserCreate;
			}
			set
			{
				if ((this._UserCreate != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCreateChanging(value);
					this.SendPropertyChanging();
					this._UserCreate = value;
					this.SendPropertyChanged("UserCreate");
					this.OnUserCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserModified", DbType="Int")]
		public System.Nullable<int> UserModified
		{
			get
			{
				return this._UserModified;
			}
			set
			{
				if ((this._UserModified != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserModifiedChanging(value);
					this.SendPropertyChanging();
					this._UserModified = value;
					this.SendPropertyChanged("UserModified");
					this.OnUserModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ConstraintMessage", Storage="_ConstraintMessages", ThisKey="UserID", OtherKey="UserCreate")]
		public EntitySet<ConstraintMessage> ConstraintMessages
		{
			get
			{
				return this._ConstraintMessages;
			}
			set
			{
				this._ConstraintMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ConstraintMessage1", Storage="_ConstraintMessages1", ThisKey="UserID", OtherKey="UserModified")]
		public EntitySet<ConstraintMessage> ConstraintMessages1
		{
			get
			{
				return this._ConstraintMessages1;
			}
			set
			{
				this._ConstraintMessages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole1", Storage="_UserRoles1", ThisKey="UserID", OtherKey="UserCreate")]
		public EntitySet<UserRole> UserRoles1
		{
			get
			{
				return this._UserRoles1;
			}
			set
			{
				this._UserRoles1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole2", Storage="_UserRoles2", ThisKey="UserID", OtherKey="UserModified")]
		public EntitySet<UserRole> UserRoles2
		{
			get
			{
				return this._UserRoles2;
			}
			set
			{
				this._UserRoles2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Permission", Storage="_Permissions", ThisKey="UserID", OtherKey="UserCreate")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Permission1", Storage="_Permissions1", ThisKey="UserID", OtherKey="UserModified")]
		public EntitySet<Permission> Permissions1
		{
			get
			{
				return this._Permissions1;
			}
			set
			{
				this._Permissions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Role", Storage="_Roles", ThisKey="UserID", OtherKey="UserCreate")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Role1", Storage="_Roles1", ThisKey="UserID", OtherKey="UserModified")]
		public EntitySet<Role> Roles1
		{
			get
			{
				return this._Roles1;
			}
			set
			{
				this._Roles1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RolePermission", Storage="_RolePermissions", ThisKey="UserID", OtherKey="UserCreate")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RolePermission1", Storage="_RolePermissions1", ThisKey="UserID", OtherKey="UserModified")]
		public EntitySet<RolePermission> RolePermissions1
		{
			get
			{
				return this._RolePermissions1;
			}
			set
			{
				this._RolePermissions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User", Storage="_Users", ThisKey="UserID", OtherKey="UserCreate")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User1", Storage="_Users1", ThisKey="UserID", OtherKey="UserModified")]
		public EntitySet<User> Users1
		{
			get
			{
				return this._Users1;
			}
			set
			{
				this._Users1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_User", Storage="_Language", ThisKey="LanguageLCID", OtherKey="LanguageLCID", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._LanguageLCID = value.LanguageLCID;
					}
					else
					{
						this._LanguageLCID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User", Storage="_User1", ThisKey="UserCreate", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserCreate = value.UserID;
					}
					else
					{
						this._UserCreate = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User1", Storage="_User2", ThisKey="UserModified", OtherKey="UserID", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.Users1.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.Users1.Add(this);
						this._UserModified = value.UserID;
					}
					else
					{
						this._UserModified = default(Nullable<int>);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConstraintMessages(ConstraintMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ConstraintMessages(ConstraintMessage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ConstraintMessages1(ConstraintMessage entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ConstraintMessages1(ConstraintMessage entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles1(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserRoles1(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserRoles2(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_UserRoles2(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Permissions1(Permission entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Permissions1(Permission entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Roles1(Role entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Roles1(Role entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RolePermissions1(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_RolePermissions1(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Users1(User entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_Users1(User entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
	}
	
	public partial class fnGetMenuItemsResult
	{
		
		private System.Nullable<int> _level;
		
		private System.Nullable<int> _Sequence;
		
		private int _MenuID;
		
		private System.Nullable<int> _ParentMenuID;
		
		private string _Description;
		
		private string _URL;
		
		public fnGetMenuItemsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int")]
		public System.Nullable<int> level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this._level = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int")]
		public System.Nullable<int> Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this._Sequence = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", DbType="Int NOT NULL")]
		public int MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					this._MenuID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentMenuID", DbType="Int")]
		public System.Nullable<int> ParentMenuID
		{
			get
			{
				return this._ParentMenuID;
			}
			set
			{
				if ((this._ParentMenuID != value))
				{
					this._ParentMenuID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(512)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
	}
	
	public partial class fnGetPagePermissionsResult
	{
		
		private int _UserID;
		
		private char _Action;
		
		private string _Name;
		
		public fnGetPagePermissionsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Char(1) NOT NULL")]
		public char Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this._Action = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
