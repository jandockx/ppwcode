<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PPWCode.Vernacular.Exceptions.I</name>
    </assembly>
    <members>
        <member name="T:PPWCode.Vernacular.Exceptions.I.ProgrammingError">
            <summary>
            This error is thrown when a programming condition occurs, which we know can happen
            (however unlikely), which we do not want to deal with in our application.
            <inheritdoc cref="T:PPWCode.Vernacular.Exceptions.I.Error"/>
            </summary>
            <remarks>
            <para><c>ProgrammingError</c> instances are used to signal programming errors,
            when we become aware of them in the code. Examples are branches of if-statements
            or switch-statement, or catch-branches, where from reasoning we assume execution
            would never reach. Instead of merely writing a comment, throwing a
            <c>ProgrammingError</c> is better.</para>
            <para>The audience of <c>ProgrammingErrors</c> are developers. To help in debugging,
            it makes sense to include a message that is as descriptive as possible.
            If you become aware of the external condition you do not want to deal
            with through an <see cref="T:System.Exception"/>, it should be carried
            by an instance of this class as its <see cref="P:System.Exception.InnerException"/>.</para>
            <para>Administrators should be aware of the errors too. They need to be aware
            of the state of the application, and are probably on the path of communication
            to the developers.</para>
            </remarks>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.Error">
            <summary>
            Exceptions that are not semantically relevant.
            When an exception of this type occurs, code should
            fail gracefully, and, in the best of cases, shut
            down the application, after warning the appropriate
            people.
            </summary>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.ValueException">
            <summary>
            In many cases, a property exception is needed that reports the original value of the property.
            This value can be used to generate sensible end-user messages of the form "Unable to change
            {<see cref="P:PPWCode.Vernacular.Exceptions.I.PropertyException.PropertyName"/>} for {<see cref="P:PPWCode.Vernacular.Exceptions.I.PropertyException.Sender"/>}
            from {<see cref="P:PPWCode.Vernacular.Exceptions.I.ValueException.OldValue"/>} to
            {<see cref="P:PPWCode.Vernacular.Exceptions.I.ValueException.NewValue"/>}.
            </summary>
            <remarks>
            <para>This exception is a generalized version of a <see cref="T:PPWCode.Vernacular.Exceptions.I.PropertyException"/> that carries
            information about the <see cref="P:PPWCode.Vernacular.Exceptions.I.ValueException.OldValue"/> and the
            <see cref="P:PPWCode.Vernacular.Exceptions.I.ValueException.NewValue"/>.
            It is a bore to create separate exceptions for each of those specific cases. It would
            be nice to use generics for the type of the property value, but that is something for a later
            version.</para>
            <para>This exception can be used for simple properties of all kinds: simple properties of reference type,
            as well as simple properties of value types, both of mutable types and immutable types.
            Values should be considered read-only, also if they are or reference type.</para>
            <para>This kind of exception cannot be thrown in a constructor, since there is no
            original value then.</para>
            </remarks>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.PropertyException">
            <summary>
            <c>PropertyExceptions</c> are exceptions that carry with them information about the property for which they
            occurred. They are usually thrown by a property setter during validation.
            </summary>
            <remarks>
            <para>If the <see cref="P:PPWCode.Vernacular.Exceptions.I.PropertyException.PropertyName"/> is <c>null</c>,
            it means that the exception could not be attributed to a specific property of <see cref="P:PPWCode.Vernacular.Exceptions.I.PropertyException.Sender"/>.</para>
            <para>The <see cref="P:PPWCode.Vernacular.Exceptions.I.PropertyException.Sender"/>
            should not be <c>null</c>, except when the exception is thrown during
            construction of an object, that could not be completed. Carrying
            the reference to the object would expose an incompletely initialized object,
            as the exception signals a failure to complete the initialization. 
            TODO: add type property for that case.</para>
            <para>
            A <c>PropertyException</c> reports on an issue with one object. If there is a need to communicate
            an issue over more than one issue, use a <see cref="T:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException"/>.</para>
            <para>Specific property exception subtypes will
            make these advises binding in most cases.</para>
            </remarks>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.SemanticException">
            <summary>
            Supertype for exceptions related to semantics: the nominal effect of a method could
            not be reached, because doing so under the given circumstances would violate semantics
            (often type invariants).
            </summary>
        </member>
        <member name="M:PPWCode.Vernacular.Exceptions.I.SemanticException.Like(PPWCode.Vernacular.Exceptions.I.SemanticException)">
            <summary>
            This most be override and strengtenth to include extra properties in subclasses
            </summary>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.ExternalError">
            <summary>
            This error is thrown when an external condition occurs, which we know can happen
            (however unlikely), which we do not want to deal with in our application.
            <inheritdoc cref="T:PPWCode.Vernacular.Exceptions.I.Error"/>
            </summary>
            <remarks>
            <para>Most often,
            these are exceptional conditions of a technical nature. These conditions are
            considered <em>preconditions</em> on the system level. Examples are a disk that is full,
            a network connection that cannot be established, a power failure, etcetera.
            The indented audience of these errors is neither the end user, nor the developer,
            but the <strong>administrator</strong>, who is responsible for system configuration,
            integration and infrastructure.</para>
            <para>The <see cref="P:System.Exception.Message"/> should express the error as closely as
            possible.
            It is the only channel to which to communicate to the administrator what went wrong.
            If you cannot pinpoint the exact nature of the error, the message should say so
            explicitly. If you become aware of the external condition you do not want to deal
            with through an <see cref="T:System.Exception"/>, it should be carried
            by an instance of this class as its <see cref="P:System.Exception.InnerException"/>.</para>
            <para>These errors should not be mentioned in the exception part of a method contract.
            They could be mentioned in the preconditions of a method contract, but in general
            this is not appropriate. <c>ExternalError</c>s are a mechanism to signal
            <em>system precondition</em> violations to administrators, it is not a part of the
            contract between developers, but rather a contract between developers in general and
            the system administrator. These errors could be documented in a document that
            communicates between developers and administrators (e.g., installation documentations),
            and this should be done in specific cases. But most often, these
            system preconditions are considered implicit (e.g., when we need a database, it is
            implied that the database connection works).</para>
            <para>It probably does not make sense to create subtypes of this error for specific
            situations. There is no need for internationalization for external errors. If there
            is extra information that we can communicate to the administrator, we can add it to
            the message.</para>
            </remarks>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.SecurityException">
            <summary>
            Exception that signals a refusal to perform
            the nominal effect by a method, because of
            security reasons.
            </summary>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.ImmutableException">
            <summary>
            The method that throws this error is a mutating method,
            flagged not to be used, because the instance is flagged
            as immutable.
            </summary>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException">
            <summary>
            Vehicle for communicating more than one <see cref="T:PPWCode.Vernacular.Exceptions.I.SemanticException"/>
            at once.
            </summary>
            <remarks>
            <para>After creation, element exceptions can be
            <see cref="M:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.AddElement(PPWCode.Vernacular.Exceptions.I.SemanticException)">Added</see> to the <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements"/>.
            Once the exception is
            <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Closed"/>, no more element exceptions can be
            added.</para>
            <para>The exception should only be thrown if it is not
            <see cref="T:System.Empty"/>.</para>
            </remarks>
        </member>
        <member name="M:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.AddElement(PPWCode.Vernacular.Exceptions.I.SemanticException)">
            <summary>
            Add an element exception to <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements"/>.
            </summary>
        </member>
        <member name="M:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.ContainsElement(PPWCode.Vernacular.Exceptions.I.SemanticException)">
            <summary>
            This contains an <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements">element</see>
            <see cref="M:PPWCode.Vernacular.Exceptions.I.SemanticException.Like(PPWCode.Vernacular.Exceptions.I.SemanticException)"/> <paramref name="exception"/>.
            </summary>
        </member>
        <member name="M:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Like(PPWCode.Vernacular.Exceptions.I.SemanticException)">
            <summary>
            This exception is semantically like the <paramref name="other"/>
            exception, and contains exceptions that are
            <see cref="M:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Like(PPWCode.Vernacular.Exceptions.I.SemanticException)">alike</see>.
            </summary>
        </member>
        <member name="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Set">
            <summary>
            The element exceptions of this compound exception.
            </summary>
            <remarks>
            <para><see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Count"/> provides a little expensive
            way to find out how many exceptions there are in the set.
            <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.IsEmpty"/> provices a little expensive
            way to find out if there are any elements in the
            set.</para>
            </remarks>
        </member>
        <member name="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.IsEmpty">
            <summary>
            There are no element exceptions in <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements"/>.
            </summary>
        </member>
        <member name="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements">
            <summary>
            The element exceptions of this compound exception.
            </summary>
            <remarks>
            <para><see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Count"/> provides a little expensive
            way to find out how many exceptions there are in the set.
            <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.IsEmpty"/> provices a little expensive
            way to find out if there are any elements in the
            set.</para>
            </remarks>
        </member>
        <member name="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Count">
            <summary>
            The number of <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements">element exceptions</see>.
            </summary>
        </member>
        <member name="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Closed">
            <summary>
            No more <see cref="P:PPWCode.Vernacular.Exceptions.I.CompoundSemanticException.Elements">element exceptions</see>
            can be added if this is <c>Closed</c>.
            </summary>
        </member>
        <member name="T:PPWCode.Vernacular.Exceptions.I.NoLongerSupportedError">
            <summary>
            This exception is thrown by a method defined in an API,
            in a later version of the API, if the method that was
            defined in an earlier version is no longer supported in
            new versions.
            </summary>
            <remarks>
            <para>That the exception can be thrown is implicit for all
            API methods.</para>
            <para>Normally, when a new version of an API is created,
            it is kept backward compatible with older versions. This
            is often a non-trivial endeavour. Although, if it is
            decided to keep backward compatibility with older versions,
            all possible effort should be made to make the backward
            compatibility complete, in some cases this is logically
            not feasible or too costly. It than often happens that
            backward compatibility can be attained for all but a limited
            number of methods, possibly for all but a limited number
            of cases. It may then be interesting to ship this new
            not-completely-backward-compatible version, if a lot
            of clients do not use the not-backward-compatible part.</para>
            <para>This exception allows the developers of the new version
            to signal which method, in which circumstances, is no
            longer supported.</para>
            </remarks>
        </member>
    </members>
</doc>
