<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PPWCode.Util.OddsAndEnds.I</name>
  </assembly>
  <members>
    <member name="T:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter">
      <summary>
            Converts enums depending on the current language
            </summary>
    </member>
    <member name="F:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.m_IsFlagEnum">
      <summary>
            Indicates wether the values of the enum are flags
            </summary>
    </member>
    <member name="F:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.m_FlagValues">
      <summary>
            Contains the values of the enum in case that it is a flag enum
            </summary>
    </member>
    <member name="F:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.m_LookupTable">
      <summary>
            Lookup table which allows converting the localized text back to the enum values
            </summary>
    </member>
    <member name="F:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.m_ResourceManager">
      <summary>
            Resource manager depending on the converted enum type
            </summary>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.#ctor(System.Type)">
      <summary>
            Create a new instance of the converter using translations from the given resource manager
            </summary>
      <param name="enumType" />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.GetFlagValueFromLocalizedString(System.String)">
      <summary>
            Return the Enum value for a flagged enum
            </summary>
      <param name="text">The text to convert (can also be a comma separated list of multiple flags)</param>
      <returns>The enum value</returns>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.IsSingleBitValue(System.UInt64)">
      <summary>
            Return true if the given value is can be represented using a single bit
            </summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.GetFlagValueText(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Return the text to display for a flag value in the given culture
            </summary>
      <param name="value">The flag enum value to get the text for</param>
      <returns>The localized text</returns>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.GetValueFromLocalizedString(System.String)">
      <summary>
            Return the Enum value for a simple (non-flagged enum)
            </summary>
      <param name="text">The text to convert</param>
      <returns>The enum value</returns>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.GetLocalizedValueText(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Return the text to display for a simple value in the given culture
            </summary>
      <param name="value">The enum value to get the text for</param>
      <returns>The localized text</returns>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Convert string values to enum values
            </summary>
      <param name="context" />
      <param name="culture" />
      <param name="value" />
      <returns />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.TypeConverter.LocalizedEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Convert the enum value to a string
            </summary>
      <param name="context" />
      <param name="culture" />
      <param name="value" />
      <param name="destinationType" />
      <returns />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Min(System.DateTime,System.DateTime)">
      <summary>
            The earliest of 2 date-times.
            </summary>
      <returns>The earliest of <paramref name="dt1" /> and
            <paramref name="dt2" />.</returns>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Min(System.Nullable{System.DateTime},System.DateTime)">
      <summary>
            The earliest of 2 date-times. When <paramref name="dt2" />
            is <c>null</c>, we return <paramref name="dt2" />.
            </summary>
      <returns>The earliest of <paramref name="dt1" /> and
            <paramref name="dt2" />. <paramref name="dt2" /> when
            <paramref name="dt1" /> is <c>null</c>.</returns>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Min(System.DateTime,System.Nullable{System.DateTime})">
      <summary>
            The earliest of 2 date-times. When <paramref name="dt2" />
            is <c>null</c>, we return <paramref name="dt1" />.
            </summary>
      <returns>The earliest of <paramref name="dt1" /> and
            <paramref name="dt2" />. <paramref name="dt1" /> when
            <paramref name="dt2" /> is <c>null</c>.</returns>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Min(System.DateTime[])">
      <summary>
            The earliest of a number of date-times.
            </summary>
      <returns>With zero inputs, <see cref="F:System.DateTime.MinValue" />
            is returned.</returns>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Min(System.Nullable{System.DateTime}[])">
      <summary>
            The earliest of a number of date-times.
            </summary>
      <returns>
        <c>null</c> values are skipped.
            With zero inputs, or all <c>null</c> inputs,<c>null</c>
            is returned.</returns>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Max(System.Nullable{System.DateTime}[])">
      <summary>
            The latest of a number of date-times.
            </summary>
      <returns>
        <c>null</c> values are skipped.
            With zero inputs, or all <c>null</c> inputs,<c>null</c>
            is returned.</returns>
      <pure />
    </member>
    <member name="T:PPWCode.Util.OddsAndEnds.I.Extensions.NamespaceDoc">
      <summary>
            Contains all the helper classes for the Peopleware system
            </summary>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.GetDomainFromUserAccount(System.String)">
      <summary>
            This function parses the domain out of an user-account.
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <returns>The domain of an user-account</returns>
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
      <ensures>!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.GetAccountNameFromUserAccount(System.String)">
      <summary>
            This function parses the UserName out of an user-account.
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <returns />
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
      <ensures>!string.IsNullOrEmpty(Contract.Result&lt;string&gt;())</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.AvailableProperties(System.String)">
      <summary>
            List all available properties of an SAM Account.
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <returns />
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
      <ensures>Contract.Result&lt;IEnumerable&lt;string&gt;&gt;() != null</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.GetProperty(System.String,System.String)">
      <summary>
            Get the value for a specified property name of a SAM account
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <param name="propertyName">A valid property name, the list of valid properties
            can be found using <see cref="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.AvailableProperties(System.String)" /></param>
      <returns />
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
      <requires>!string.IsNullOrEmpty(propertyName)</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.UserExists(System.String)">
      <summary>
            Checks if a certain user exists
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <returns />
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.FindName(System.String)">
      <summary>
            Get the displayname property of a SAM-account
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <returns />
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.FindEmail(System.String)">
      <summary>
            Get the email of a SAM-account
            </summary>
      <param name="userAccount">A useraccount has following format: DOMAIN\UserName</param>
      <returns />
      <requires>!string.IsNullOrEmpty(userAccount)</requires>
      <requires>userAccount.Length &gt; 2</requires>
      <requires>userAccount.ToCharArray().Where(c =&gt; c == '\\').Count() == 1</requires>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="T:PPWCode.Util.OddsAndEnds.I.Extensions.StringExtensions">
      <summary>
            PPW helper string functions
            </summary>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.StringExtensions.StartWithACapital(System.String)">
      <summary>
            Checks if the first character of a string is a capital
            </summary>
      <pure />
      <requires>!string.IsNullOrEmpty(value)</requires>
      <ensures>Contract.Result&lt;bool&gt;() == Char.IsUpper(value[0])</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.StringExtensions.ToLong(System.String)">
      <summary>
            Convert the string to an Int64
            The function returns NULL if the conversion fails
            </summary>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.StringExtensions.ToInt(System.String)">
      <summary>
            Convert the string to an Int32
            The function returns NULL if the conversion fails
            </summary>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.StringExtensions.ToDecimal(System.String)">
      <summary>
            Convert the string to a Decimal
            The function returns NULL if the conversion fails
            </summary>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.StringExtensions.ToDateTime(System.String)">
      <summary>
            Convert the string to a DateTime
            The function returns NULL if the conversion fails
            </summary>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.ImmediateFirstOfQuarter(System.DateTime)">
      <summary>
            ImmediateFirstOfQuarter returns given date if the given date is first of quarter or else first of next quarter
            </summary>
      <param name="dt" />
      <returns />
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.ImmediateFirstOfMonth(System.DateTime)">
      <summary>
            ImmediateFirstOfMonth returns given date if the given date is first of month or else first of next month
            </summary>
      <param name="dt" />
      <returns />
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.DaysBetween(System.DateTime,System.DateTime)">
      <summary>
            Indien start- en endate in dezelfde dag liggen, wordt er 0 teruggegeven
            </summary>
      <param name="startDate" />
      <param name="endDate" />
      <returns />
      <pure />
      <ensures>startDate.StripHours() &lt; endDate.StripHours()
    ? Contract.Result&lt;int&gt;() &gt; 0
    : true</ensures>
      <ensures>startDate.StripHours() == endDate.StripHours()
    ? Contract.Result&lt;int&gt;() == 0
    : true</ensures>
      <ensures>startDate.StripHours() &gt; endDate.StripHours()
    ? Contract.Result&lt;int&gt;() &lt; 0
    : true</ensures>
      <ensures>(endDate - startDate).Days == Contract.Result&lt;int&gt;()</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.MonthsBetween(System.DateTime,System.DateTime)">
      <summary>
            Indien start- en enddate in dezelfde maand liggen wordt er 0 teruggegeven.
            </summary>
      <param name="startDate" />
      <param name="endDate" />
      <returns />
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.ImmediateFirstOfYear(System.DateTime)">
      <summary>
            ImmediateFirstOfYear returns given date if the given date is first of year or else first of next year
            </summary>
      <param name="dt" />
      <returns />
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.NumberOfDaysInYear(System.DateTime)">
      <summary>
            Aantal dagen in een jaar, rekening houdend met schrikkeljaren.
            </summary>
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.TypeExtensions.GetQualifiedName(System.Type)">
      <summary>
            Checks if the first character of a string is a capital
            </summary>
      <pure />
      <requires>value != null</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.TypeExtensions.IsNullableType(System.Type)">
      <summary>
            Check if a type is of Nullable type
            </summary>
      <param name="type" />
      <returns />
      <requires>type != null</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.TypeExtensions.GetSubclassesOf(System.Type,System.Boolean)">
      <summary>
            Get a sequence of types where all the items are a sub-class of <paramref name="type" />.
            The parameter <paramref name="excludeSystemTypes" /> determines if system types should be excluded.
            </summary>
      <param name="type" />
      <param name="excludeSystemTypes" />
      <returns />
    </member>
    <member name="T:PPWCode.Util.OddsAndEnds.I.NamespaceDoc">
      <summary>
        <para>This assembly contains a collection of utility code
            (helper methods, extension methods, ...) for different
            domains.</para>
        <para>This is to be considered a proving ground for such
            code. The collection is not well-organized, and dynamic.
            The intention is that, after a while, code here is
            separated out and put into a separate Util or Vernacular
            project for a particular domain. New code will be
            added over time and follow the same path.</para>
        <para>The code here is production quality nevertheless.</para>
        <para>This project should <strong>never depend on any other
            PPWCode library, except PPWCode.Vernacular.Exceptions.</strong>
            In general, it should depend on as little libraries outside
            the standard libraries as possible.</para>
      </summary>
      <remarks>
        <para>Even the allowed dependency on <c>PPWCode.Vernacular.Exceptions</c>
            is a bad one. If needed, the vernacular should be split in 2,
            part util, part vernacular (see Java).</para>
      </remarks>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.ActiveDirectory.AdSearch.#ctor(System.String)">
      <requires>!string.IsNullOrEmpty(domainName)</requires>
      <ensures>DomainName == domainName</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.UnitTestHelpers.SequenceGenerator.CreateRandomDecimalSequence(System.Int32,System.Double,System.Double,System.Decimal@)">
      <requires>nrItems &gt;= 0</requires>
      <requires>start &lt; end</requires>
      <ensures>Contract.Result&lt;IEnumerable&lt;decimal&gt;&gt;().Count() == nrItems</ensures>
      <ensures>Contract.Result&lt;IEnumerable&lt;decimal&gt;&gt;().Sum(o =&gt; o) == sum</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.SQLServerExtensions.GetConstraint(System.Data.SqlClient.SqlException)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.IsLegalSqlDate(System.Nullable{System.DateTime})">
      <pure />
      <ensures>Contract.Result&lt;bool&gt;() == (dt.HasValue ? dt.Value.IsLegalSqlDate() : true)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.LastDayOfNextQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfQuarter(System.Int32)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfPreviousQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.IsLegalSqlDate(System.DateTime)">
      <pure />
      <ensures>Contract.Result&lt;bool&gt;() == (SqlDateTime.MinValue.Value &lt;= dt &amp;&amp; dt &lt;= SqlDateTime.MaxValue.Value)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.StripSeconds(System.DateTime)">
      <pure />
      <ensures>Contract.Result&lt;DateTime&gt;() == new DateTime(dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, 0)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.StripMilliseconds(System.DateTime)">
      <pure />
      <ensures>Contract.Result&lt;DateTime&gt;() == new DateTime(dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, dt.Second)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.IsFirstDayOfMonth(System.Nullable{System.DateTime})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.IsConsecutiveSequence``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.DateTime}},System.Func{``0,System.Nullable{System.DateTime}})">
      <pure />
      <requires>extractDateBegin != null</requires>
      <requires>extractDateEnd != null</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.LastDayOfCurrentQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.StripSeconds(System.Nullable{System.DateTime})">
      <pure />
      <ensures>Contract.Result&lt;DateTime?&gt;() == (!dt.HasValue ? dt : dt.StripSeconds())</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfQuarter(System.String)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.StripMilliseconds(System.Nullable{System.DateTime})">
      <pure />
      <ensures>Contract.Result&lt;DateTime?&gt;() == (!dt.HasValue ? dt : dt.StripMilliseconds())</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfNextMonth(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.StripHours(System.DateTime)">
      <pure />
      <ensures>Contract.Result&lt;DateTime&gt;() == new DateTime(dt.Year, dt.Month, dt.Day)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfNextNextQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfNextYear(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.IsFirstDayOfQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.AddQuarters(System.Nullable{System.DateTime},System.Int32)">
      <pure />
      <ensures>Contract.Result&lt;DateTime?&gt;() == dt.AddMonths(3 * quarters)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.FirstDayOfNextQuarter(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.AddMonths(System.Nullable{System.DateTime},System.Int32)">
      <pure />
      <ensures>Contract.Result&lt;DateTime?&gt;() == (!dt.HasValue ? dt : dt.Value.AddMonths(months))</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.AddQuarters(System.DateTime,System.Int32)">
      <pure />
      <ensures>Contract.Result&lt;DateTime&gt;() == dt.AddMonths(3 * quarters)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.QuartersBetween(System.DateTime,System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.IsFirstDayOfMonth(System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.AgeInYears(System.DateTime,System.DateTime)">
      <pure />
      <ensures>Contract.Result&lt;int&gt;() ==
dt.Year - birth.Year - (dt.Month &lt; birth.Month || (dt.Month == birth.Month &amp;&amp; dt.Day &lt; birth.Day) ? 1 : 0)</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeExtensions.StripHours(System.Nullable{System.DateTime})">
      <pure />
      <ensures>Contract.Result&lt;DateTime?&gt;() == (!dt.HasValue ? dt : dt.StripHours())</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.TypeExtensions.IsSuperTypeOf(System.Type,System.Type)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.ObjectExtentions.ToLogString(System.Object)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.NullableSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.SetEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.SetEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.NullableSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.CollectionExtensions.AsIList``1(System.Collections.Generic.IEnumerable{``0})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.MonthInterestFraction(System.Double,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0d</requires>
      <requires>nrMonths &gt;= 1 &amp;&amp; nrMonths &lt;= 12</requires>
      <ensures>Contract.Result&lt;double&gt;() &gt;= 0d</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.YearInterestFraction(System.Decimal,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0m</requires>
      <ensures>Contract.Result&lt;decimal&gt;() &gt;= 0m</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.DayInterestFraction(System.Decimal,System.DateTime,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0m</requires>
      <requires>nrDays &gt;= 1 &amp;&amp; nrDays &lt;= when.NumberOfDaysInYear()</requires>
      <ensures>Contract.Result&lt;decimal&gt;() &gt;= 0m</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.QuarterInterestFraction(System.Decimal,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0m</requires>
      <requires>nrQuarters &gt;= 1 &amp;&amp; nrQuarters &lt;= 4</requires>
      <ensures>Contract.Result&lt;decimal&gt;() &gt;= 0m</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.IsConsecutiveSequence``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Func{``0,System.Nullable{System.Decimal}})">
      <pure />
      <requires>extractDateBegin != null</requires>
      <requires>extractDateEnd != null</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.MonthInterestFraction(System.Decimal,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0m</requires>
      <requires>nrMonths &gt;= 1 &amp;&amp; nrMonths &lt;= 12</requires>
      <ensures>Contract.Result&lt;decimal&gt;() &gt;= 0m</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.Root(System.Decimal,System.Int32)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.YearInterestFraction(System.Double)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0d</requires>
      <ensures>Contract.Result&lt;double&gt;() &gt;= 0d</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.YearInterestFraction(System.Double,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0d</requires>
      <ensures>Contract.Result&lt;double&gt;() &gt;= 0d</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.QuarterInterestFraction(System.Double,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0d</requires>
      <requires>nrQuarters &gt;= 1 &amp;&amp; nrQuarters &lt;= 4</requires>
      <ensures>Contract.Result&lt;double&gt;() &gt;= 0d</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.DayInterestFraction(System.Double,System.DateTime,System.Int32)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0d</requires>
      <requires>nrDays &gt;= 1 &amp;&amp; nrDays &lt;= when.NumberOfDaysInYear()</requires>
      <ensures>Contract.Result&lt;double&gt;() &gt;= 0d</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.MathExtensions.YearInterestFraction(System.Decimal)">
      <pure />
      <requires>yearlyInterestRateAsPercentage &gt;= 0m</requires>
      <ensures>Contract.Result&lt;decimal&gt;() &gt;= 0m</ensures>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Max(System.Nullable{System.DateTime},System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Max(System.DateTime,System.Nullable{System.DateTime})">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Max(System.DateTime[])">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.Extensions.DateTimeHelper.Max(System.DateTime,System.DateTime)">
      <pure />
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.AssemblyHelpers.AssemblyHelper.CreateInstanceOf(System.Reflection.Assembly,System.String)">
      <requires>assembly != null</requires>
      <requires>!string.IsNullOrEmpty(className)</requires>
    </member>
    <member name="M:PPWCode.Util.OddsAndEnds.I.AssemblyHelpers.AssemblyHelper.LoadAssembly(System.String)">
      <requires>!string.IsNullOrEmpty(assemblyName)</requires>
    </member>
  </members>
</doc>