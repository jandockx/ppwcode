#summary Versioning policy in ppwcode

= Introduction =

Add your content here.


= Details =

Ppwcode projects are obviously versioned.  The project's version always needs to be configured in the project's POM.  The version number must adhere to the following rules (these rules are of course subject to change).

==Mark Version==

Each project has a mark version.  The mark version corresponds with the major number in traditional versioning schemes, which typically carry a `<major>.<minor>.<micro>` structure.  In ppwcode projects, the mark version number is part of the maven `artifactId`.  Because it is part of the Artifact ID, it is possible that a project depends on multiple versions of the same package. This may be beneficial with fast evolving software systems.

The mark version is written as a roman numeral.  Examples are bean_I, persistence_III, i18n_IV.  

A package MUST receive a new mark version number if the following is true:

  * Methods in the package's public API have disappeared.
  * The contracts of methods in the API have changed intentionally (i.e. the change in the contract is not a bug fix).
  * The signature of methods in the API has become more restrictive, potentially breaking depending software.  E.g. public methods that are made final.

==Major Version==

A ppwcode has a major version that is configured in the POM's `version`.  The version number consists of a major and a minor number.   Within the same mark version, a package MUST receive a different major version number if the following is true:

  * Methods are deprecated (no changes in signature or contracts).
  * New methods are added.  New contracts are consequently added, obviously without affecting existing contracts.

==Minor Version==

A ppwcode has a major version that is configured in the POM's `version`.  The version number consists of a major and a minor number.  Within the same mark and major version, a different minor number means that:

  * Bug fixes in the API's contract
  * Bug fixes in the implementation
  * Implementation changes (performance, refactoring, ...)